package com.pingan.chain.contract;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple5;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import rx.Observable;
import rx.functions.Func1;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 3.3.1.
 */
public class PlatformControl extends Contract {
    private static final String BINARY = "6080604052620f424060035561c3506004553480156200001e57600080fd5b5060405162003ee138038062003ee1833981810160405260808110156200004457600080fd5b81019080805160405193929190846401000000008211156200006557600080fd5b838201915060208201858111156200007c57600080fd5b82518660018202830111640100000000821117156200009a57600080fd5b8083526020830192505050908051906020019080838360005b83811015620000d0578082015181840152602081019050620000b3565b50505050905090810190601f168015620000fe5780820380516001836020036101000a031916815260200191505b50604052602001805160405193929190846401000000008211156200012257600080fd5b838201915060208201858111156200013957600080fd5b82518660018202830111640100000000821117156200015757600080fd5b8083526020830192505050908051906020019080838360005b838110156200018d57808201518184015260208101905062000170565b50505050905090810190601f168015620001bb5780820380516001836020036101000a031916815260200191505b5060405260200180519060200190929190805190602001909291905050508360059080519060200190620001f192919062000342565b5082600690805190602001906200020a92919062000342565b5081600760006101000a81548160ff021916908360ff16021790555080600881905550600854600981905550600854600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a350505050620003f1565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200038557805160ff1916838001178555620003b6565b82800160010185558215620003b6579182015b82811115620003b557825182559160200191906001019062000398565b5b509050620003c59190620003c9565b5090565b620003ee91905b80821115620003ea576000816000905550600101620003d0565b5090565b90565b613ae080620004016000396000f3fe608060405234801561001057600080fd5b50600436106101a95760003560e01c80639692043a116100f9578063b6196a9311610097578063dd62ed3e11610071578063dd62ed3e14610a2a578063e724529c14610aa2578063e841972a14610af2578063f2fde38b14610b4a576101a9565b8063b6196a9314610990578063c027731b146109be578063c07908de146109dc576101a9565b8063a4ea5930116100d3578063a4ea593014610862578063a9059cbb14610880578063b1b86198146108e6578063b414d4b614610934576101a9565b80639692043a146106cd5780639b3ecc021461073b578063a0a3003314610797576101a9565b80634987ca90116101665780638402b2a1116101405780638402b2a1146105c05780638da5cb5b146105de5780638f32d59b1461062857806395d89b411461064a576101a9565b80634987ca901461047f57806370a082311461055e578063715018a6146105b6576101a9565b806306fdde03146101ae5780630da68ed71461023157806318160ddd1461030e5780632c4e774a1461032c578063313ce567146103ff5780633bcd7c8314610423575b600080fd5b6101b6610b8e565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101f65780820151818401526020810190506101db565b50505050905090810190601f1680156102235780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102f46004803603604081101561024757600080fd5b810190808035906020019064010000000081111561026457600080fd5b82018360208201111561027657600080fd5b8035906020019184600183028401116401000000008311171561029857600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929080359060200190929190505050610c30565b604051808215151515815260200191505060405180910390f35b61031661105c565b6040518082815260200191505060405180910390f35b6103e56004803603602081101561034257600080fd5b810190808035906020019064010000000081111561035f57600080fd5b82018360208201111561037157600080fd5b8035906020019184600183028401116401000000008311171561039357600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050611066565b604051808215151515815260200191505060405180910390f35b6104076114c4565b604051808260ff1660ff16815260200191505060405180910390f35b6104656004803603602081101561043957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506114db565b604051808215151515815260200191505060405180910390f35b6105446004803603604081101561049557600080fd5b81019080803590602001906401000000008111156104b257600080fd5b8201836020820111156104c457600080fd5b803590602001918460018302840111640100000000831117156104e657600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192908035151590602001909291905050506118bf565b604051808215151515815260200191505060405180910390f35b6105a06004803603602081101561057457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611be3565b6040518082815260200191505060405180910390f35b6105be611c2c565b005b6105c8611d65565b6040518082815260200191505060405180910390f35b6105e6611d6b565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610630611d94565b604051808215151515815260200191505060405180910390f35b610652611deb565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610692578082015181840152602081019050610677565b50505050905090810190601f1680156106bf5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6106f9600480360360208110156106e357600080fd5b8101908080359060200190929190505050611e8d565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61077d6004803603602081101561075157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611ec9565b604051808215151515815260200191505060405180910390f35b6107c3600480360360208110156107ad57600080fd5b8101908080359060200190929190505050612137565b60405180806020018681526020018581526020018415151515815260200183151515158152602001828103825287818151815260200191508051906020019080838360005b83811015610823578082015181840152602081019050610808565b50505050905090810190601f1680156108505780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390f35b61086a61222c565b6040518082815260200191505060405180910390f35b6108cc6004803603604081101561089657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612236565b604051808215151515815260200191505060405180910390f35b610932600480360360408110156108fc57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061224d565b005b6109766004803603602081101561094a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506124b7565b604051808215151515815260200191505060405180910390f35b6109bc600480360360208110156109a657600080fd5b81019080803590602001909291905050506124d7565b005b6109c661255b565b6040518082815260200191505060405180910390f35b610a28600480360360408110156109f257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612561565b005b610a8c60048036036040811015610a4057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506127cc565b6040518082815260200191505060405180910390f35b610af060048036036040811015610ab857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803515159060200190929190505050612853565b005b610b3460048036036020811015610b0857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612997565b6040518082815260200191505060405180910390f35b610b8c60048036036020811015610b6057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612acb565b005b606060058054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610c265780601f10610bfb57610100808354040283529160200191610c26565b820191906000526020600020905b815481529060010190602001808311610c0957829003601f168201915b5050505050905090565b6000610c3a611d94565b610cac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b6000809050600090505b600c80549050811015610d6957600c8181548110610cd057fe5b90600052602060002090600502016000016040518082805460018160011615610100020316600290048015610d3c5780601f10610d1a576101008083540402835291820191610d3c565b820191906000526020600020905b815481529060010190602001808311610d28575b5050915050604051809103902084805190602001201415610d5c57610d69565b8080600101915050610cb6565b600c805490508114610db85760011515600c8281548110610d8657fe5b906000526020600020906005020160040160009054906101000a900460ff1615151415610db7576000915050611056565b5b60008090506001841415610dd057610e109050610e05565b6002841415610de457620151809050610e04565b6003841415610df85762093a809050610e03565b600092505050611056565b5b5b610e0d613721565b6040518060a0016040528087815260200142815260200186815260200160011515815260200160001515815250905060008090505b600180549050811015610f07576001600c8281548110610e5e57fe5b9060005260206000209060050201600301600060018481548110610e7e57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508080600101915050610e42565b50600c81908060018154018082558091505090600182039060005260206000209060050201600090919290919091506000820151816000019080519060200190610f52929190613754565b50602082015181600101556040820151816002015560608201518160040160006101000a81548160ff02191690831515021790555060808201518160040160016101000a81548160ff0219169083151502179055505050507fc0aca05937c48024562c5af6f0a9366dfe3ce5891cacbc55afe3cfec93261c9a86866040518080602001838152602001828103825284818151815260200191508051906020019080838360005b83811015611013578082015181840152602081019050610ff8565b50505050905090810190601f1680156110405780820380516001836020036101000a031916815260200191505b50935050505060405180910390a1600193505050505b92915050565b6000600854905090565b6000611070611d94565b6110e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b6000809050600090505b600c8054905081101561119f57600c818154811061110657fe5b906000526020600020906005020160000160405180828054600181600116156101000203166002900480156111725780601f10611150576101008083540402835291820191611172565b820191906000526020600020905b81548152906001019060200180831161115e575b50509150506040518091039020838051906020012014156111925761119f565b80806001019150506110ec565b600c805490508114156111fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806139466026913960400191505060405180910390fd5b600c818154811061120a57fe5b906000526020600020906005020160020154600c828154811061122957fe5b906000526020600020906005020160010154014210611293576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260278152602001806139c36027913960400191505060405180910390fd5b6000600c82815481106112a257fe5b9060005260206000209060050201905060008160040160006101000a81548160ff021916908315150217905550600080905060008090505b60018054905081101561138f5760001515836003016000600184815481106112fe57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514156113825781806001019250505b80806001019150506112da565b5060018054905060028202116113c15760018260040160016101000a81548160ff0219169083151502179055506113df565b60008260040160016101000a81548160ff0219169083151502179055505b7fdb0c9e602121dd3a748a47bee4782f5738e616e47a6177a120a4cb9df97992b2826000018360040160019054906101000a900460ff166040518080602001831515151581526020018281038252848181546001816001161561010002031660029004815260200191508054600181600116156101000203166002900480156114a95780601f1061147e576101008083540402835291602001916114a9565b820191906000526020600020905b81548152906001019060200180831161148c57829003601f168201915b5050935050505060405180910390a160019350505050919050565b6000600760009054906101000a900460ff16905090565b60006114e5611d94565b611557576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156115dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260308152602001806139936030913960400191505060405180910390fd5b6000809050600090505b600180549050811015611671578273ffffffffffffffffffffffffffffffffffffffff166001828154811061161857fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561166457611671565b80806001019150506115e7565b6001805490508114156116cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260368152602001806138b86036913960400191505060405180910390fd5b600115156117116040518060400160405280601581526020017f72656d6f7665417574686f72697a656447726f75700000000000000000000000815250612b51565b151514611769576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260308152602001806138ee6030913960400191505060405180910390fd5b6001808080549050038154811061177c57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600182815481106117b457fe5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001808080549050038154811061180f57fe5b9060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600180548091906001900361185191906137d4565b507f61b0c0b000e23a4c071e290caf9e92409b04cd6b752aa3e935c4d332bf22363583604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a16001915050919050565b60008060009050600090505b600180549050811015611955573373ffffffffffffffffffffffffffffffffffffffff16600182815481106118fc57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561194857611955565b80806001019150506118cb565b6001805490508114156119b3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602b815260200180613a81602b913960400191505060405180910390fd5b6000809050600090505b600c80549050811015611a7057600c81815481106119d757fe5b90600052602060002090600502016000016040518082805460018160011615610100020316600290048015611a435780601f10611a21576101008083540402835291820191611a43565b820191906000526020600020905b815481529060010190602001808311611a2f575b5050915050604051809103902085805190602001201415611a6357611a70565b80806001019150506119bd565b600c80549050811415611ace576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602781526020018061396c6027913960400191505060405180910390fd5b600c8181548110611adb57fe5b906000526020600020906005020160020154600c8281548110611afa57fe5b906000526020600020906005020160010154014210611b64576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602881526020018061391e6028913960400191505060405180910390fd5b83600c8281548110611b7257fe5b906000526020600020906005020160030160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060019250505092915050565b6000600a60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b611c34611d94565b611ca6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60045481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614905090565b606060068054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611e835780601f10611e5857610100808354040283529160200191611e83565b820191906000526020600020905b815481529060010190602001808311611e6657829003601f168201915b5050505050905090565b60018181548110611e9a57fe5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000611ed3611d94565b611f45576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611fcb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602d8152602001806139ea602d913960400191505060405180910390fd5b6001151561200d6040518060400160405280601281526020017f616464417574686f72697a656447726f75700000000000000000000000000000815250612b51565b151514612065576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260308152602001806138ee6030913960400191505060405180910390fd5b60018290806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550507fb80e39bb3d662e3e8a20aa279f55b0ee531db200b54326d65f06b31833338a6982604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a160019050919050565b600c818154811061214457fe5b9060005260206000209060050201600091509050806000018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156121f05780601f106121c5576101008083540402835291602001916121f0565b820191906000526020600020905b8154815290600101906020018083116121d357829003601f168201915b5050505050908060010154908060020154908060040160009054906101000a900460ff16908060040160019054906101000a900460ff16905085565b6000600954905090565b6000612243338484612caf565b6001905092915050565b6000809050600090505b6001805490508110156122e1573373ffffffffffffffffffffffffffffffffffffffff166001828154811061228857fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156122d4576122e1565b8080600101915050612257565b60018054905081141561233f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602b815260200180613a81602b913960400191505060405180910390fd5b600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16156123ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f3a557365722069732066726f7a656e2e0000000000000000000000000000000081525060200191505060405180910390fd5b6124098383612f4f565b60045482106124b2577f482c55a49645b24c411672e87b98513fa41eeb5086cbf3ad9e3fa9d0e6d87bf2338484604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060405180910390a15b505050565b60026020528060005260406000206000915054906101000a900460ff1681565b6124df611d94565b612551576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b8060048190555050565b60035481565b6000809050600090505b6001805490508110156125f5573373ffffffffffffffffffffffffffffffffffffffff166001828154811061259c57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156125e8576125f5565b808060010191505061256b565b600180549050811415612653576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602b815260200180613a81602b913960400191505060405180910390fd5b600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615612713576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f3a557365722069732066726f7a656e2e0000000000000000000000000000000081525060200191505060405180910390fd5b61271d8383612ff6565b5060045482106127c7577fa766bb6f18005afa6c63e71087890a432258fcec5ba4d0d82f526355ec81fcd1338484604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060405180910390a15b505050565b6000600b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b61285b611d94565b6128cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b80600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507f48335238b4855f35377ed80f164e8c6f3c366e54ac00b96a6402d4a9814a03a58282604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001821515151581526020019250505060405180910390a15050565b60006129a1611d94565b612a13576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612a99576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260278152602001806138496027913960400191505060405180910390fd5b6000612ab56001805490506003546130a690919063ffffffff16565b9050612ac18382612236565b5080915050919050565b612ad3611d94565b612b45576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b612b4e81613135565b50565b60008060009050600090505b600c80549050811015612c1057600c8181548110612b7757fe5b90600052602060002090600502016000016040518082805460018160011615610100020316600290048015612be35780601f10612bc1576101008083540402835291820191612be3565b820191906000526020600020905b815481529060010190602001808311612bcf575b5050915050604051809103902083805190602001201415612c0357612c10565b8080600101915050612b5d565b600c80549050811415612c27576000915050612caa565b60011515600c8281548110612c3857fe5b906000526020600020906005020160040160009054906101000a900460ff161515148015612c95575060011515600c8281548110612c7257fe5b906000526020600020906005020160040160019054906101000a900460ff161515145b15612ca4576001915050612caa565b60009150505b919050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415612d35576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526025815260200180613a386025913960400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612dbb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260238152602001806138266023913960400191505060405180910390fd5b612e0d81600a60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461327990919063ffffffff16565b600a60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612ea281600a60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461330290919063ffffffff16565b600a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505050565b612f59828261338a565b612ff28233612fed84600b60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461327990919063ffffffff16565b61352a565b5050565b6000613003338484612caf565b61309c833361309785600b60008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461330290919063ffffffff16565b61352a565b6001905092915050565b600080821161311d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525060200191505060405180910390fd5b600082848161312857fe5b0490508091505092915050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156131bb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806138706026913960400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000828211156132f1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525060200191505060405180910390fd5b600082840390508091505092915050565b600080828401905083811015613380576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415613410576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526021815260200180613a176021913960400191505060405180910390fd5b6134258160085461327990919063ffffffff16565b60088190555061347d81600a60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461327990919063ffffffff16565b600a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156135b0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526024815260200180613a5d6024913960400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415613636576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001806138966022913960400191505060405180910390fd5b80600b60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040518082815260200191505060405180910390a3505050565b6040518060a001604052806060815260200160008152602001600081526020016000151581526020016000151581525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061379557805160ff19168380011785556137c3565b828001600101855582156137c3579182015b828111156137c25782518255916020019190600101906137a7565b5b5090506137d09190613800565b5090565b8154818355818111156137fb578183600052602060002091820191016137fa9190613800565b5b505050565b61382291905b8082111561381e576000816000905550600101613806565b5090565b9056fe45524332303a207472616e7366657220746f20746865207a65726f206164647265737372656c656173654461696c793a2067726f757020697320746865207a65726f20616464726573734f776e61626c653a206e6577206f776e657220697320746865207a65726f206164647265737345524332303a20617070726f766520746f20746865207a65726f206164647265737372656d6f7665417574686f72697a656447726f75703a2067726f7570206973206e6f7420696e20617574686f72697a656447726f7570616464417574686f72697a656447726f75703a206973737565206e6f742061636365707465642062792067726f757073766f7465427947726f75703a20766f7465206973206f6e6c792076616c696420696e203120646179766f7465526573756c743a206973737565206973206e6f7420696e20766f7465497373756573766f7465427947726f75703a206973737565206973206e6f7420696e20766f746549737375657372656d6f7665417574686f72697a656447726f75703a2067726f757020697320746865207a65726f2061646472657373766f7465526573756c743a20726573756c742069732076616c6964206166746572203120646179616464417574686f72697a656447726f75703a2067726f757020697320746865207a65726f206164647265737345524332303a206275726e2066726f6d20746865207a65726f206164647265737345524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f20616464726573736f6e6c7947726f75703a2063616c6c6572206973206e6f7420696e20617574686f72697a656447726f7570a265627a7a72315820f4ab3e78fab9177d5150cfa3abfa30f6d689e3f849434d362e36f030624d1cb764736f6c634300050c0032\r\n";

    protected PlatformControl(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected PlatformControl(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public List<AddGroupEventResponse> getAddGroupEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("AddGroup",
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<AddGroupEventResponse> responses = new ArrayList<AddGroupEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AddGroupEventResponse typedResponse = new AddGroupEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.group = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<AddGroupEventResponse> addGroupEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("AddGroup",
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, AddGroupEventResponse>() {
            @Override
            public AddGroupEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                AddGroupEventResponse typedResponse = new AddGroupEventResponse();
                typedResponse.log = log;
                typedResponse.group = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public List<ApprovalEventResponse> getApprovalEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("Approval",
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<ApprovalEventResponse> responses = new ArrayList<ApprovalEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalEventResponse typedResponse = new ApprovalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.spender = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<ApprovalEventResponse> approvalEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("Approval",
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, ApprovalEventResponse>() {
            @Override
            public ApprovalEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                ApprovalEventResponse typedResponse = new ApprovalEventResponse();
                typedResponse.log = log;
                typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.spender = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public List<BeginVoteEventResponse> getBeginVoteEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("BeginVote",
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<BeginVoteEventResponse> responses = new ArrayList<BeginVoteEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            BeginVoteEventResponse typedResponse = new BeginVoteEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.issue = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.voteTime = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<BeginVoteEventResponse> beginVoteEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("BeginVote",
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, BeginVoteEventResponse>() {
            @Override
            public BeginVoteEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                BeginVoteEventResponse typedResponse = new BeginVoteEventResponse();
                typedResponse.log = log;
                typedResponse.issue = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.voteTime = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public List<CalcVoteEventResponse> getCalcVoteEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("CalcVote",
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Bool>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<CalcVoteEventResponse> responses = new ArrayList<CalcVoteEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            CalcVoteEventResponse typedResponse = new CalcVoteEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.issue = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.result = (Boolean) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<CalcVoteEventResponse> calcVoteEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("CalcVote",
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Bool>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, CalcVoteEventResponse>() {
            @Override
            public CalcVoteEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                CalcVoteEventResponse typedResponse = new CalcVoteEventResponse();
                typedResponse.log = log;
                typedResponse.issue = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.result = (Boolean) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public List<FrozenFundsEventResponse> getFrozenFundsEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("FrozenFunds",
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Bool>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<FrozenFundsEventResponse> responses = new ArrayList<FrozenFundsEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            FrozenFundsEventResponse typedResponse = new FrozenFundsEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.target = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.frozen = (Boolean) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<FrozenFundsEventResponse> frozenFundsEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("FrozenFunds",
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Bool>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, FrozenFundsEventResponse>() {
            @Override
            public FrozenFundsEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                FrozenFundsEventResponse typedResponse = new FrozenFundsEventResponse();
                typedResponse.log = log;
                typedResponse.target = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.frozen = (Boolean) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public List<LargeAmountPayEventResponse> getLargeAmountPayEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("LargeAmountPay",
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<LargeAmountPayEventResponse> responses = new ArrayList<LargeAmountPayEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            LargeAmountPayEventResponse typedResponse = new LargeAmountPayEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.group = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.from = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<LargeAmountPayEventResponse> largeAmountPayEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("LargeAmountPay",
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, LargeAmountPayEventResponse>() {
            @Override
            public LargeAmountPayEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                LargeAmountPayEventResponse typedResponse = new LargeAmountPayEventResponse();
                typedResponse.log = log;
                typedResponse.group = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.from = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public List<LargeAmountTransferEventResponse> getLargeAmountTransferEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("LargeAmountTransfer",
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<LargeAmountTransferEventResponse> responses = new ArrayList<LargeAmountTransferEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            LargeAmountTransferEventResponse typedResponse = new LargeAmountTransferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<LargeAmountTransferEventResponse> largeAmountTransferEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("LargeAmountTransfer",
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, LargeAmountTransferEventResponse>() {
            @Override
            public LargeAmountTransferEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                LargeAmountTransferEventResponse typedResponse = new LargeAmountTransferEventResponse();
                typedResponse.log = log;
                typedResponse.from = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.to = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("OwnershipTransferred",
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList());
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<OwnershipTransferredEventResponse> ownershipTransferredEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("OwnershipTransferred",
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList());
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, OwnershipTransferredEventResponse>() {
            @Override
            public OwnershipTransferredEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
                typedResponse.log = log;
                typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public List<RemoveGroupEventResponse> getRemoveGroupEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("RemoveGroup",
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<RemoveGroupEventResponse> responses = new ArrayList<RemoveGroupEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RemoveGroupEventResponse typedResponse = new RemoveGroupEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.group = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<RemoveGroupEventResponse> removeGroupEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("RemoveGroup",
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, RemoveGroupEventResponse>() {
            @Override
            public RemoveGroupEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                RemoveGroupEventResponse typedResponse = new RemoveGroupEventResponse();
                typedResponse.log = log;
                typedResponse.group = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public List<TransferEventResponse> getTransferEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("Transfer",
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<TransferEventResponse> responses = new ArrayList<TransferEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransferEventResponse typedResponse = new TransferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<TransferEventResponse> transferEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("Transfer",
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, TransferEventResponse>() {
            @Override
            public TransferEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                TransferEventResponse typedResponse = new TransferEventResponse();
                typedResponse.log = log;
                typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public static RemoteCall<PlatformControl> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String name, String symbol, BigInteger decimals, BigInteger totalSupply) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(name),
                new org.web3j.abi.datatypes.Utf8String(symbol),
                new org.web3j.abi.datatypes.generated.Uint8(decimals),
                new org.web3j.abi.datatypes.generated.Uint256(totalSupply)));
        return deployRemoteCall(PlatformControl.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static RemoteCall<PlatformControl> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String name, String symbol, BigInteger decimals, BigInteger totalSupply) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(name),
                new org.web3j.abi.datatypes.Utf8String(symbol),
                new org.web3j.abi.datatypes.generated.Uint8(decimals),
                new org.web3j.abi.datatypes.generated.Uint256(totalSupply)));
        return deployRemoteCall(PlatformControl.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public RemoteCall<TransactionReceipt> addAuthorizedGroup(String group) {
        final Function function = new Function(
                "addAuthorizedGroup",
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(group)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> allowance(String owner, String spender) {
        final Function function = new Function("allowance",
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(owner),
                        new org.web3j.abi.datatypes.Address(spender)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<String> authorizedGroup(BigInteger param0) {
        final Function function = new Function("authorizedGroup",
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<BigInteger> balanceOf(String account) {
        final Function function = new Function("balanceOf",
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(account)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> calcVoteResult(String issue) {
        final Function function = new Function(
                "calcVoteResult",
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(issue)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> dailyReleaseAmount() {
        final Function function = new Function("dailyReleaseAmount",
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> decimals() {
        final Function function = new Function("decimals",
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> freezeAccount(String target, Boolean freeze) {
        final Function function = new Function(
                "freezeAccount",
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(target),
                        new org.web3j.abi.datatypes.Bool(freeze)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Boolean> frozenAccount(String param0) {
        final Function function = new Function("frozenAccount",
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<Boolean> isOwner() {
        final Function function = new Function("isOwner",
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<BigInteger> largeAmount() {
        final Function function = new Function("largeAmount",
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<String> name() {
        final Function function = new Function("name",
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<BigInteger> originSupply() {
        final Function function = new Function("originSupply",
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<String> owner() {
        final Function function = new Function("owner",
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> releaseDaily(String group) {
        final Function function = new Function(
                "releaseDaily",
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(group)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> removeAuthorizedGroup(String group) {
        final Function function = new Function(
                "removeAuthorizedGroup",
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(group)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> renounceOwnership() {
        final Function function = new Function(
                "renounceOwnership",
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setLargeAmount(BigInteger amount) {
        final Function function = new Function(
                "setLargeAmount",
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(amount)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> symbol() {
        final Function function = new Function("symbol",
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<BigInteger> totalSupply() {
        final Function function = new Function("totalSupply",
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> transfer(String recipient, BigInteger amount) {
        final Function function = new Function(
                "transfer",
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(recipient),
                        new org.web3j.abi.datatypes.generated.Uint256(amount)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> transferOwnership(String newOwner) {
        final Function function = new Function(
                "transferOwnership",
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(newOwner)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> transferToUserByGroup(String user, BigInteger amount) {
        final Function function = new Function(
                "transferToUserByGroup",
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(user),
                        new org.web3j.abi.datatypes.generated.Uint256(amount)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> userPayByGroup(String user, BigInteger amount) {
        final Function function = new Function(
                "userPayByGroup",
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(user),
                        new org.web3j.abi.datatypes.generated.Uint256(amount)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> voteBegin(String issue, BigInteger voteType) {
        final Function function = new Function(
                "voteBegin",
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(issue),
                        new org.web3j.abi.datatypes.generated.Uint256(voteType)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> voteByGroup(String issue, Boolean voteView) {
        final Function function = new Function(
                "voteByGroup",
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(issue),
                        new org.web3j.abi.datatypes.Bool(voteView)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple5<String, BigInteger, BigInteger, Boolean, Boolean>> voteIssues(BigInteger param0) {
        final Function function = new Function("voteIssues",
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}, new TypeReference<Bool>() {}));
        return new RemoteCall<Tuple5<String, BigInteger, BigInteger, Boolean, Boolean>>(
                new Callable<Tuple5<String, BigInteger, BigInteger, Boolean, Boolean>>() {
                    @Override
                    public Tuple5<String, BigInteger, BigInteger, Boolean, Boolean> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple5<String, BigInteger, BigInteger, Boolean, Boolean>(
                                (String) results.get(0).getValue(),
                                (BigInteger) results.get(1).getValue(),
                                (BigInteger) results.get(2).getValue(),
                                (Boolean) results.get(3).getValue(),
                                (Boolean) results.get(4).getValue());
                    }
                });
    }

    public static PlatformControl load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new PlatformControl(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public static PlatformControl load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new PlatformControl(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static class AddGroupEventResponse {
        public Log log;

        public String group;
    }

    public static class ApprovalEventResponse {
        public Log log;

        public String owner;

        public String spender;

        public BigInteger value;
    }

    public static class BeginVoteEventResponse {
        public Log log;

        public String issue;

        public BigInteger voteTime;
    }

    public static class CalcVoteEventResponse {
        public Log log;

        public String issue;

        public Boolean result;
    }

    public static class FrozenFundsEventResponse {
        public Log log;

        public String target;

        public Boolean frozen;
    }

    public static class LargeAmountPayEventResponse {
        public Log log;

        public String group;

        public String from;

        public BigInteger amount;
    }

    public static class LargeAmountTransferEventResponse {
        public Log log;

        public String from;

        public String to;

        public BigInteger amount;
    }

    public static class OwnershipTransferredEventResponse {
        public Log log;

        public String previousOwner;

        public String newOwner;
    }

    public static class RemoveGroupEventResponse {
        public Log log;

        public String group;
    }

    public static class TransferEventResponse {
        public Log log;

        public String from;

        public String to;

        public BigInteger value;
    }
}
